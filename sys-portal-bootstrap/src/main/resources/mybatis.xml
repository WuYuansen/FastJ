<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:annotation-config/>
	<!-- 扫描classpath包下所有带有注解的类   自动翻译注解 -->
	<context:component-scan base-package="com.gtjy.p2p.module.*" />
	<!-- ***************资源文件************** -->
	<context:property-placeholder location="classpath*:mySqlDB.properties"/> 
    <!-- **************** druid 监控连接池配置 ***************** https://github.com/alibaba/druid/wiki -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxActive" value="${maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x' from dual" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小  -->
		<!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false -->
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		<!-- 对泄漏的连接 自动关闭 -->
		<property name="removeAbandoned" value="${removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
   		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="${logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->
        
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="mergeStat" />
		<!--  <property name="filters" value="stat" /> -->
		<!-- 慢日志查询  缺省为3秒  修改为10秒 10000 -->
		<property name="connectionProperties" value="druid.stat.slowSqlMillis=5000" />
		
		<!-- DruidDataSource各自独立 ， 支持配置公用监控数据 -->
		<!-- <property name="useGloalDataSourceStat" value="true" /> -->
	</bean>
	
	<!-- druid 监控  spring  -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com/gtjy/p2p/modules/tiles/*/impl.*</value>
				<value>com/gtjy/p2p/modules/*/service/*/impl.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	
	<!-- ***************事务配置************** -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<aop:config>  
             <aop:advisor pointcut="execution(* com.gtjy.p2p.modules.tiles.*.impl..*Impl.*(..))"  advice-ref="txAdvice" />  
    </aop:config>  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
        	<!-- 如果当前没有事务,就创建一个事务;如果已经存在事务,则加入事务; -->
            <tx:method name="get*" read-only="true"/>  
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>  
            <tx:method name="load*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>  
    </tx:advice>  
    
	<!-- MyBatis Mapper.XMl 配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自定义插件 分页 -->
		<property name="configLocation" value="classpath:plugin_mybatis.xml"/>
	    <!-- 自定义插件 分页 _end-->
	    <property name="mapperLocations"  value="classpath*:com/gtjy/p2p/modules/*/mapper/*.xml"/> 
	</bean>
	
	<!-- MyBatis 接口编程配置  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">    
	    <!-- basePackage指定要扫描的包，在此包之下的映射器都会被搜索到,可指定多个包，包与包之间用逗号或分号分隔-->
	    <property name="basePackage" value="com.gtjy.p2p.modules.*.DAO" />
	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!--1:配置一个JdbcTemplate实例，并将这个“共享的”，“安全的”实例注入到不同的DAO类中去
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
         <property name="dataSource" ref="dataSource"/>   
    </bean>   --> 
</beans>